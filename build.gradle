plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin'
    id 'signing'
}

group = 'org.octopusden.octopus'
description 'Octopus module for license gradle plugin'

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation "com.github.node-gradle:gradle-node-plugin:${project.'gradle-node-plugin.version'}"
    api "org.octopusden.octopus.infrastructure:components-registry-service-client:${project['octopus-components-registry-service.version']}"
    api "com.platformlib:platformlib-process-local:${project['platformlib-process.version']}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${project['junit-jupiter-api.version']}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project['junit-jupiter-engine.version']}"
    testImplementation "org.mockito:mockito-core:${project['mockito-core.version']}"
}

gradlePlugin {
    plugins {
        LicenseGradlePlugin {
            id = 'org.octopusden.octopus.license-management'
            displayName = 'org.octopusden.octopus.license-management'
            description = 'Octopus module for license gradle plugin'
            implementationClass = 'org.octopusden.octopus.license.management.plugins.gradle.LicenseGradlePlugin'
        }
    }
}

def resourceDir = "${buildDir}/generated/resources"

sourceSets {
    main {
        java { srcDirs = [] }    // no source dirs for the java compiler
        groovy { srcDirs = ["src/main/groovy", "src/main/java"] }  // compile   everything in src/ with groovy
        resources {
            srcDirs += [resourceDir]
        }
    }
}

java{
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

apply plugin: 'maven-publish'

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(System.getenv("MAVEN_USERNAME"))
            password.set(System.getenv("MAVEN_PASSWORD"))
        }
    }
    transitionCheckOptions {
        maxRetries.set(60)
        delayBetween.set(Duration.ofSeconds(30))
    }
}

publishing {
    publications {
        withType(MavenPublication) {
            pom {
                name = project.name
                description = "Octopus module for license gradle plugin"
                url = "https://github.com/octopusden/octopus-license-gradle-plugin.git"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    url = "https://github.com/octopusden/octopus-license-gradle-plugin.git"
                    connection = "scm:git://github.com/octopusden/octopus-license-gradle-plugin.git"
                }
                developers {
                    developer {
                        id = "octopus"
                        name = "octopus"
                    }
                }
            }
        }
    }
}

signing {
    required = System.getenv().containsKey("ORG_GRADLE_PROJECT_signingKey")
            && System.getenv().containsKey("ORG_GRADLE_PROJECT_signingPassword")
    sign publishing.publications
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
}

test {
    useJUnitPlatform()
}